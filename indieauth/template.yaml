AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: |
  indieauth
  Sample SAM Template for indieauth
Parameters:
  HostedZoneName:
    Type: String
  CognitoSubdomain:
    Type: String
  CertificateArn:
    Type: String
Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        CMK:
          Ref: IndieAuthCMK
        UserPoolID:
          Ref: UserPool
        UserPoolURL: !Sub "https://${CognitoSubdomain}.${HostedZoneName}"
        UserPoolClientID:
          Ref: IndieAuthClient
        StackID:
          Ref: 'AWS::StackId'
Resources:
  IndieAuthCMK:
    Type: 'AWS::KMS::Key'
    Properties:
      KeyPolicy:
        Id: DefaultKmsPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS:
                - 'Fn::Join':
                    - ':'
                    - - 'arn:aws:iam:'
                      - Ref: 'AWS::AccountId'
                      - root
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow Auth Endpoint to encrypt
            Effect: Allow
            Principal:
              AWS:
                - 'Fn::GetAtt':
                    - AuthEndpointFunctionRole
                    - Arn
            Action:
              - 'kms:Encrypt'
              - 'kms:GenerateDataKey'
            Resource: '*'
  IndieAuthCMKAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: alias/IndieAuth
      TargetKeyId:
        Ref: IndieAuthCMK
  UserPool:
    Type: 'AWS::Cognito::UserPool'
  IndieAuthClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      UserPoolId:
        Ref: UserPool
      GenerateSecret: true
  AuthEndpointFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: auth/
      Handler: app.auth_handler
      Runtime: python3.6
      Events:
        AuthEndpointGET:
          Type: Api
          Properties:
            Path: /auth
            Method: get
      Description: ''
      MemorySize: 128
      Policies:
        - CloudFormationDescribeStacksPolicy:
            Description: Gives permission to describe CloudFormation stacks
            Parameters: {}
            Definition:
              Statement:
                - Effect: Allow
                  Action:
                    - 'cloudformation:DescribeStacks'
                  Resource:
                    'Fn::Sub': >-
                      arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackId}
  CallbackEndpointFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: auth/
      Handler: app.callback_handler
      Runtime: python3.6
      Events:
        CallbackEndpointGET:
          Type: Api
          Properties:
            Path: /callback
            Method: get
  AuthCodeCheckFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: auth/
      Handler: app.auth_code_check
      Runtime: python3.6
      Events:
        AuthEndpointPOST:
          Type: Api
          Properties:
            Path: /auth
            Method: post
  UserPoolDomainFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: userpool_custom_resources/
      Handler: customresources.handle_user_pool_custom_domain
      Runtime: python3.6
      Description: ''
      MemorySize: 128
      Timeout: 300
      Policies:
        - Statement:
          - Action: [
                  "cloudfront:UpdateDistribution",
              ]
            Effect: Allow
            # this is too broad, but I don't see a way to deterimine the 
            # cloudfront distribution ID ahead of time
            Resource: '*'
        - Statement:
          - Action: [
                  "cognito-idp:DeleteUserPoolDomain",
                  "cognito-idp:CreateUserPoolDomain",
                  "cognito-idp:DescribeUserPoolDomain",
                  "cognito-idp:UpdateUserPoolDomain"
              ]
            Effect: Allow
            Resource: !GetAtt UserPool.Arn
        - Statement:
          - Action: [
                  "cognito-idp:UpdateUserPoolDomain",
                  "cognito-idp:DescribeUserPoolDomain"
              ]
            Effect: Allow
            # Some operations seem to require '*' access to
            # UpdateUserPoolDomain. Maybe a bug?
            Resource: '*'
  UserPoolDomainConfig:
    Type: 'Custom::CustomResource'
    Properties:
      ServiceToken:
        'Fn::GetAtt':
          - UserPoolDomainFunction
          - Arn
      UserPoolId:
        Ref: UserPool
      Domain: !Sub "${CognitoSubdomain}.${HostedZoneName}"
      CustomDomainConfig: 
        CertificateArn: !Ref CertificateArn
    DependsOn:
      - CallbackEndpointFunction
      - IndieAuthClient
      - UserPool
  UserPoolDomainRecordSet:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        DNSName: !GetAtt UserPoolDomainConfig.CloudFrontDomain
        HostedZoneId: Z2FDTNDATAQYW2
      Name: !Sub "${CognitoSubdomain}.${HostedZoneName}"
      HostedZoneName: !Sub "${HostedZoneName}."
      Type: A
  UserPoolClientConfigurationFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: userpool_custom_resources/
      Handler: customresources.handle_client_config
      Runtime: python3.6
      Description: ''
      MemorySize: 128
      Timeout: 300
      Policies:
        - Statement:
          - Action: [
                  "cognito-idp:UpdateUserPoolClient",
                  "cognito-idp:DescribeUserPoolClient"
              ]
            Effect: Allow
            Resource: !GetAtt UserPool.Arn
  UserPoolClientAdditionalConfig:
    Type: 'Custom::CustomResource'
    Properties:
      ServiceToken:
        'Fn::GetAtt':
          - UserPoolClientConfigurationFunction
          - Arn
      UserPool:
        Ref: UserPool
      UserPoolClient:
        Ref: IndieAuthClient
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - 'Fn::Sub': >-
            https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/callback
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
    DependsOn:
      - CallbackEndpointFunction
      - IndieAuthClient
      - UserPool
Outputs:
  AuthEndpoint:
    Description: API Gateway endpoint URL for Prod auth endpoint
    Value:
      'Fn::Sub': >-
        https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/auth
  CallbackEndpoint:
    Description: API Gateway endpoint URL for Prod callback endpoint
    Value:
      'Fn::Sub': >-
        https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/callback
